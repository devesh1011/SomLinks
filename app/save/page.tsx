"use client";
import { useEffect, useState } from "react";
import Link from "next/link";
import {
  Sparkles,
  Plus,
  Eye,
  ExternalLink,
  Wand2,
  Save,
  Link as LinkIcon,
  Grid3x3,
  Zap,
  CreditCard,
} from "lucide-react";
import { useAccount } from "wagmi";
import { ConnectButton } from "@rainbow-me/rainbowkit";

// DB shape from Supabase
type PaymentLink = {
  id: string;
  title: string;
  to_account: string;
  amount: number;
  memo: string | null;
  description: string | null;
  component_code: string | null;
  total_paid: number;
  payments_count: number;
  created_at: string;
  updated_at: string;
};

export default function SavePage() {
  const [to, setTo] = useState("");
  const [prompt, setPrompt] = useState("");
  // Generated by LLM
  const [genTitle, setGenTitle] = useState<string>("");
  const [genAmount, setGenAmount] = useState<number | null>(null);
  const [genDescription, setGenDescription] = useState<string>("");
  const [genComponentHtml, setGenComponentHtml] = useState<string>("");
  const [loadingGen, setLoadingGen] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [savedId, setSavedId] = useState<string | null>(null);
  const [links, setLinks] = useState<PaymentLink[]>([]);

  // Use wagmi hook for wallet connection
  const { address: connectedAccount, isConnected } = useAccount();

  useEffect(() => {
    // load from Supabase via API
    refreshLinks();
  }, []);

  const evmAddressPattern = /^0x[a-fA-F0-9]{40}$/;

  const refreshLinks = async () => {
    try {
      const res = await fetch("/api/links", { cache: "no-store" });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Failed to load links");
      setLinks(data.links || []);
    } catch (e) {
      // ignore list error visually
    }
  };

  const onGenerate = async () => {
    setError(null);
    setSavedId(null);
    setLoadingGen(true);
    setGenTitle("");
    setGenAmount(null);
    setGenDescription("");
    setGenComponentHtml("");

    if (!to.trim()) {
      setError("Recipient address is required (e.g. 0x1234...)");
      setLoadingGen(false);
      return;
    }

    if (!evmAddressPattern.test(to.trim())) {
      setError("Recipient must be a valid EVM address like 0x1234...");
      setLoadingGen(false);
      return;
    }

    if (!prompt.trim()) {
      setError("Please describe what the payment link is for");
      setLoadingGen(false);
      return;
    }

    try {
      const res = await fetch("/api/generate-link", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ recipient: to.trim(), prompt: prompt.trim() }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Failed to generate link");
      setGenTitle(data.title || "Payment");
      setGenAmount(data.amount === null ? null : Number(data.amount));
      setGenDescription(data.description || "");
      setGenComponentHtml(data.componentHtml || "");
    } catch (e: any) {
      setError(e?.message || "Generation failed");
    } finally {
      setLoadingGen(false);
    }
  };

  const sanitizeHtml = (html: string) =>
    html
      .replace(/<script[\s\S]*?>[\s\S]*?<\/script>/gi, "")
      .replace(/ on[a-z]+="[^"]*"/gi, "")
      .replace(/ on[a-z]+='[^']*'/gi, "");

  const onSave = async (e: React.FormEvent) => {
    e.preventDefault();
    setSavedId(null);
    setError(null);

    if (!to.trim()) {
      setError("Recipient address is required (e.g. 0x1234...)");
      return;
    }

    if (!evmAddressPattern.test(to.trim())) {
      setError("Recipient must be a valid EVM address like 0x1234...");
      return;
    }

    if (!genAmount || !Number.isFinite(genAmount) || genAmount <= 0) {
      setError("Generated amount is invalid");
      return;
    }

    if (!genTitle.trim()) {
      setError("Generated title missing");
      return;
    }

    try {
      const res = await fetch("/api/links", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title: genTitle.trim(),
          to: to.trim(),
          amount: Number(genAmount),
          description: genDescription || null,
          componentCode: genComponentHtml
            ? sanitizeHtml(genComponentHtml)
            : null,
        }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Failed to save link");
      setSavedId(data.link.id);
      await refreshLinks();
    } catch (e: any) {
      setError(e?.message || "Failed to save link");
    }
  };

  const handleLinkClick = (linkId: string) => {
    console.log(`Opening link: /pay/${linkId}`);
  };

  const handlePayListClick = () => {
    console.log("Navigating to /pay");
  };

  return (
    <div className="min-h-screen bg-black relative overflow-hidden">
      {/* Grid Pattern Background */}
      <div className="absolute inset-0 bg-gradient-to-br from-red-950/20 via-black to-red-950/30">
        <div className="absolute inset-0 bg-grid-pattern opacity-10"></div>
      </div>

      {/* Animated Red Orbs */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-20 left-20 w-96 h-96 bg-red-500/20 rounded-full blur-3xl animate-pulse-slow"></div>
        <div
          className="absolute bottom-32 right-32 w-64 h-64 bg-red-600/30 rounded-full blur-2xl animate-float"
          style={{ animationDelay: "2s" }}
        ></div>
        <div
          className="absolute top-1/2 left-1/3 w-32 h-32 bg-red-400/40 rounded-full blur-xl animate-bounce-gentle"
          style={{ animationDelay: "1s" }}
        ></div>
      </div>

      {/* Animated particles */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(25)].map((_, i) => (
          <div
            key={i}
            className={`absolute rounded-full ${
              i % 4 === 0
                ? "w-2 h-2 bg-red-400/40"
                : i % 4 === 1
                ? "w-1.5 h-1.5 bg-red-500/50"
                : i % 4 === 2
                ? "w-1 h-1 bg-red-600/60"
                : "w-0.5 h-0.5 bg-white/30"
            }`}
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animation: `float ${4 + Math.random() * 6}s ease-in-out infinite`,
              animationDelay: `${Math.random() * 8}s`,
            }}
          />
        ))}
      </div>

      {/* Modern header */}
      <header className="relative z-10 m-8">
        <div className="backdrop-blur-xl bg-white/10 border border-red-500/30 rounded-3xl shadow-2xl">
          <div className="px-8 py-4 flex items-center justify-between">
            {/* Brand section */}
            <div className="flex items-center gap-5">
              <div className="relative group">
                <div className="w-14 h-14 bg-gradient-to-br from-red-500 via-red-600 to-red-800 rounded-2xl flex items-center justify-center shadow-xl group-hover:shadow-red-500/40 transition-all duration-300">
                  <Link href="/">
                    <Sparkles className="w-7 h-7 text-white animate-pulse" />
                  </Link>
                </div>
                <div className="absolute inset-0 bg-red-500 rounded-2xl blur-lg opacity-40 group-hover:opacity-60 transition-opacity"></div>
                <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-400 rounded-full animate-ping"></div>
              </div>
              <div>
                <h1 className="text-3xl font-black bg-gradient-to-r from-white via-red-200 to-red-300 bg-clip-text text-transparent">
                  SomLinks
                </h1>
                <p className="text-red-400/80 text-sm font-medium">
                  Create Payment Links
                </p>
              </div>
            </div>

            {/* Wallet connection */}
            <div className="flex items-center gap-4">
              <ConnectButton />
            </div>
          </div>
        </div>
      </header>

      <main className="relative z-10 flex min-h-screen flex-col items-center px-8 pb-16">
        {/* Hero section */}
        <div className="text-center mb-16 max-w-4xl">
          <div className="inline-flex items-center gap-3 px-6 py-3 bg-red-500/10 border border-red-500/30 rounded-full mb-8 backdrop-blur-sm">
            <Wand2 className="w-5 h-5 text-red-400" />
            <span className="text-red-200 font-semibold">
              AI-Powered Blockchain Links Generation
            </span>
          </div>

          <h2 className="text-5xl md:text-6xl font-black text-white mb-6 leading-tight font-bold">
            Create
            <span className="block bg-gradient-to-r from-red-400 via-red-500 to-red-600 bg-clip-text text-transparent">
              SomLinks
            </span>
          </h2>
          <p className="text-xl text-gray-300 max-w-2xl mx-auto leading-relaxed">
            Generate intelligent payment links with AI assistance and customize
            them to your needs
          </p>
        </div>

        {/* Main Form - Redesigned */}
        <div className="w-full max-w-6xl">
          <form onSubmit={onSave} className="space-y-8">
            {/* Form Header Card */}
            <div className="relative group">
              {/* Animated background */}
              <div className="absolute -inset-1 bg-gradient-to-r from-red-600/30 via-red-500/20 to-red-700/30 rounded-2xl blur-xl group-hover:blur-2xl transition-all duration-700 opacity-0 group-hover:opacity-100"></div>

              {/* Main header card */}
              <div className="relative backdrop-blur-xl bg-gradient-to-br from-black/40 via-red-950/20 to-black/40 border border-red-500/20 rounded-2xl p-6 shadow-2xl">
                {/* Icon and title row */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    {/* Animated icon */}
                    <div className="relative">
                      <div className="w-20 h-20 bg-gradient-to-br from-red-500 via-red-600 to-red-800 rounded-3xl flex items-center justify-center shadow-2xl group-hover:shadow-red-500/40 transition-all duration-500">
                        <Wand2 className="w-10 h-10 text-white group-hover:scale-110 transition-transform duration-300" />
                      </div>
                      {/* Floating particles around icon */}
                      <div className="absolute -top-2 -right-2 w-4 h-4 bg-red-400 rounded-full animate-ping"></div>
                      <div
                        className="absolute -bottom-2 -left-2 w-3 h-3 bg-red-300 rounded-full animate-ping"
                        style={{ animationDelay: "0.5s" }}
                      ></div>
                    </div>

                    <div>
                      <h3 className="text-3xl font-bold bg-gradient-to-r from-white via-red-100 to-red-200 bg-clip-text text-transparent">
                        AI Payment Generator
                      </h3>
                      <p className="text-red-300/80 text-lg">
                        Transform your ideas into smart payment links
                      </p>
                    </div>
                  </div>

                  {/* Status badge */}
                </div>

                {/* Decorative line */}
                <div className="h-px bg-gradient-to-r from-transparent via-red-500/40 to-transparent mb-6"></div>
              </div>
            </div>

            {/* Input Fields Card */}
            <div className="relative group">
              <div className="absolute -inset-1 bg-gradient-to-r from-red-500/20 to-red-600/20 rounded-2xl blur-lg group-hover:blur-xl transition-all duration-500 opacity-0 group-hover:opacity-100"></div>

              <div className="relative backdrop-blur-xl bg-gradient-to-br from-black/30 via-red-950/10 to-black/30 border border-red-500/20 rounded-2xl p-8 shadow-xl">
                {/* Recipient Address */}
                <div className="mb-8">
                  <label className="block text-lg font-semibold text-red-200 mb-3 flex items-center gap-2">
                    <div className="w-2 h-2 bg-red-400 rounded-full"></div>
                    Recipient Address
                  </label>
                  <div className="relative">
                    <input
                      value={to}
                      onChange={(e) => setTo(e.target.value)}
                      placeholder="Enter 0x wallet address..."
                      className="w-full backdrop-blur-sm bg-white/5 border-2 border-red-500/20 rounded-xl px-6 py-4 text-white placeholder-red-300/50
                                 focus:border-red-400 focus:ring-4 focus:ring-red-400/20 transition-all duration-300 text-lg
                                 hover:border-red-500/30"
                    />
                    <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                      <div className="w-3 h-3 bg-red-400/60 rounded-full animate-pulse"></div>
                    </div>
                  </div>
                </div>

                {/* Description Input */}
                <div className="mb-8">
                  <label className="block text-lg font-semibold text-red-200 mb-3 flex items-center gap-2">
                    <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                    Payment Description
                  </label>
                  <div className="relative">
                    <textarea
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      placeholder="Describe what this payment is for... (e.g., Donation for community project, Payment for services, etc.)"
                      className="w-full backdrop-blur-sm bg-white/5 border-2 border-red-500/20 rounded-xl px-6 py-4 text-white placeholder-red-300/50
                                 focus:border-red-400 focus:ring-4 focus:ring-red-400/20 transition-all duration-300 text-lg min-h-[140px] resize-none
                                 hover:border-red-500/30"
                    />
                    <div className="absolute right-4 top-4">
                      <div
                        className="w-2 h-2 bg-red-500/60 rounded-full animate-pulse"
                        style={{ animationDelay: "0.3s" }}
                      ></div>
                    </div>
                  </div>
                </div>

                {/* Generate Button */}
                <div className="text-center">
                  <button
                    type="button"
                    onClick={onGenerate}
                    disabled={loadingGen}
                    className="group relative px-12 py-4 bg-gradient-to-r from-red-500 via-red-600 to-red-700 rounded-2xl text-white font-bold text-lg
                               hover:from-red-600 hover:via-red-700 hover:to-red-800 transform hover:scale-105 transition-all duration-300
                               shadow-2xl hover:shadow-red-500/30 disabled:opacity-50 disabled:cursor-not-allowed
                               flex items-center justify-center gap-3 mx-auto"
                  >
                    {loadingGen ? (
                      <>
                        <div className="w-6 h-6 border-3 border-white/30 border-t-white rounded-full animate-spin"></div>
                        <span>Generating with AI...</span>
                      </>
                    ) : (
                      <>
                        <Wand2 className="w-6 h-6 group-hover:rotate-12 transition-transform duration-300" />
                        <span>Generate Payment Link</span>
                        <div className="absolute inset-0 bg-gradient-to-r from-red-500 to-red-700 rounded-2xl blur opacity-50 -z-10 group-hover:opacity-75 transition-opacity"></div>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>

            {/* Generated Preview Card */}
            {(genTitle || genAmount || genDescription || genComponentHtml) && (
              <div className="relative group">
                <div className="absolute -inset-1 bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-2xl blur-lg group-hover:blur-xl transition-all duration-500 opacity-0 group-hover:opacity-100"></div>

                <div className="relative backdrop-blur-xl bg-gradient-to-br from-black/30 via-green-950/10 to-black/30 border border-green-500/20 rounded-2xl p-8 shadow-xl">
                  {/* Preview Header */}
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl flex items-center justify-center">
                      <Eye className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <h4 className="text-2xl font-bold text-white">
                        Generated Preview
                      </h4>
                      <p className="text-green-300/80">
                        Review and customize your payment link
                      </p>
                    </div>
                  </div>

                  {/* Preview Content */}
                  {genComponentHtml ? (
                    <div
                      className="rounded-2xl border-2 border-green-500/30 overflow-hidden backdrop-blur-sm bg-white/5 mb-6"
                      dangerouslySetInnerHTML={{
                        __html: sanitizeHtml(genComponentHtml),
                      }}
                    />
                  ) : (
                    <div className="backdrop-blur-sm bg-white/5 border-2 border-green-500/30 rounded-2xl p-6 mb-6">
                      <div className="text-2xl font-bold text-white mb-3">
                        {genTitle || "Payment"}
                      </div>
                      <div className="text-green-200 text-lg mb-2">
                        {genAmount ? `${genAmount} STT` : "Amount TBD"} →{" "}
                        {to || "recipient"}
                      </div>
                      {genDescription && (
                        <div className="text-green-300 mb-2">
                          {genDescription}
                        </div>
                      )}
                    </div>
                  )}

                  {/* Customization Fields */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <label className="block text-xs font-medium text-red-200">
                        Title
                      </label>
                      <input
                        className="w-full backdrop-blur-sm bg-white/10 border border-red-500/30 rounded-xl px-3 py-2 text-white
                                   focus:border-red-400 focus:ring-2 focus:ring-red-400/50 transition-all duration-300"
                        value={genTitle}
                        onChange={(e) => setGenTitle(e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="block text-xs font-medium text-red-200">
                        Amount (STT)
                      </label>
                      <input
                        type="number"
                        min="0"
                        step="0.000001"
                        className="w-full backdrop-blur-sm bg-white/10 border border-red-500/30 rounded-xl px-3 py-2 text-white
                                   focus:border-red-400 focus:ring-2 focus:ring-red-400/50 transition-all duration-300"
                        value={genAmount ?? ""}
                        onChange={(e) =>
                          setGenAmount(
                            e.target.value ? Number(e.target.value) : null
                          )
                        }
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="block text-xs font-medium text-red-200">
                        Description
                      </label>
                      <input
                        className="w-full backdrop-blur-sm bg-white/10 border border-red-500/30 rounded-xl px-3 py-2 text-white
                                   focus:border-red-400 focus:ring-2 focus:ring-red-400/50 transition-all duration-300"
                        value={genDescription}
                        onChange={(e) => setGenDescription(e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Error Display */}
            {error && (
              <div className="relative group">
                <div className="absolute -inset-1 bg-gradient-to-r from-red-500/30 to-red-600/30 rounded-2xl blur-lg opacity-0 group-hover:opacity-100 transition-all duration-500"></div>
                <div className="relative backdrop-blur-xl bg-gradient-to-br from-red-950/20 via-red-900/10 to-red-950/20 border border-red-500/30 rounded-2xl p-6 shadow-xl">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-red-500/20 rounded-full flex items-center justify-center">
                      <div className="w-3 h-3 bg-red-400 rounded-full animate-pulse"></div>
                    </div>
                    <div className="text-red-200 text-lg">{error}</div>
                  </div>
                </div>
              </div>
            )}

            {/* Action Buttons */}
            <div className="relative group">
              <div className="absolute -inset-1 bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-2xl blur-lg group-hover:blur-xl transition-all duration-500 opacity-0 group-hover:opacity-100"></div>

              <div className="relative backdrop-blur-xl bg-gradient-to-br from-black/30 via-green-950/10 to-black/30 border border-green-500/20 rounded-2xl p-8 shadow-xl">
                <div className="flex flex-col lg:flex-row items-center justify-between gap-6">
                  <div className="flex items-center gap-4">
                    <button
                      type="submit"
                      className="group relative px-8 py-4 bg-gradient-to-r from-green-500 via-emerald-500 to-green-600 rounded-2xl text-white font-bold text-lg
                                 hover:from-green-600 hover:via-emerald-600 hover:to-green-700 transform hover:scale-105 transition-all duration-300
                                 shadow-2xl hover:shadow-green-500/30 flex items-center gap-3"
                    >
                      <Save className="w-6 h-6 group-hover:scale-110 transition-transform duration-300" />
                      Save Payment Link
                      <div className="absolute inset-0 bg-gradient-to-r from-green-500 to-emerald-600 rounded-2xl blur opacity-50 -z-10 group-hover:opacity-75 transition-opacity"></div>
                    </button>
                  </div>

                  {savedId && (
                    <div className="backdrop-blur-sm bg-green-500/20 border-2 border-green-400/40 rounded-2xl px-6 py-4">
                      <div className="flex items-center gap-3">
                        <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                        <span className="text-green-200 font-semibold">
                          Successfully Saved!
                        </span>
                        <Link
                          href={`/pay/${savedId}`}
                          className="text-green-100 hover:text-white transition-colors underline font-medium flex items-center gap-2"
                        >
                          Open Link <ExternalLink className="w-4 h-4" />
                        </Link>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </form>
        </div>

        {/* Payment Links List */}
        <div className="w-full max-w-5xl mt-16">
          <div className="group relative">
            {/* Glow effect */}
            <div className="absolute -inset-1 bg-gradient-to-r from-red-600/20 to-red-700/20 rounded-3xl blur-xl group-hover:blur-2xl transition-all duration-500 opacity-0 group-hover:opacity-100"></div>

            {/* Main card */}
            <div
              className="relative backdrop-blur-xl bg-gradient-to-br from-black/50 to-red-900/20 border border-red-500/30 rounded-3xl p-10 
                           hover:border-red-500/50 transition-all duration-500 shadow-2xl"
            >
              {/* Header */}
              <div className="flex items-center justify-between mb-8">
                <div className="flex items-center gap-4">
                  <div className="relative">
                    <div className="w-16 h-16 bg-gradient-to-br from-red-600 to-red-800 rounded-2xl flex items-center justify-center shadow-xl">
                      <LinkIcon className="w-8 h-8 text-white" />
                    </div>
                    <div className="absolute inset-0 bg-red-600 rounded-2xl blur-lg opacity-50"></div>
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-white">
                      Your Payment Links
                    </h3>
                    <p className="text-red-300">
                      Manage and track your created links
                    </p>
                  </div>
                </div>
                <Link
                  href="/pay"
                  className="text-red-300 hover:text-white transition-colors text-sm flex items-center gap-1 group"
                >
                  Go to Pay list
                  <ExternalLink className="w-4 h-4 group-hover:translate-x-0.5 transition-transform" />
                </Link>
              </div>

              {links.length === 0 ? (
                <div className="backdrop-blur-sm bg-white/5 border border-red-500/30 rounded-2xl p-8 text-center">
                  <Plus className="w-12 h-12 text-red-300 mx-auto mb-4 opacity-50" />
                  <div className="text-red-200 text-lg">
                    No links yet. Create one above.
                  </div>
                  <div className="text-red-300 text-sm mt-2">
                    Your generated payment links will appear here
                  </div>
                </div>
              ) : (
                <div className="grid grid-cols-1 gap-4">
                  {links.map((l) => (
                    <div
                      key={l.id}
                      className="group backdrop-blur-sm bg-white/5 border border-red-500/30 rounded-2xl p-6 
                                 hover:bg-white/10 hover:border-red-500/50 transition-all duration-300 
                                 transform hover:scale-[1.02]"
                    >
                      <div className="flex items-center justify-between">
                        <div className="space-y-2">
                          <div className="flex items-center gap-2">
                            <div className="font-medium text-white">
                              {l.title}
                            </div>
                            <span className="text-red-300 text-sm font-mono bg-black/20 px-2 py-1 rounded">
                              /pay/{l.id}
                            </span>
                          </div>
                          <div className="text-red-200 text-sm">
                            <span className="font-semibold">
                              {l.amount} SEI
                            </span>{" "}
                            → {l.to_account}
                            {l.memo && (
                              <span className="text-red-300"> • {l.memo}</span>
                            )}
                          </div>
                          {l.total_paid > 0 && (
                            <div className="flex items-center gap-4 text-xs text-red-300">
                              <span>Total paid: {l.total_paid} SEI</span>
                              <span>Payments: {l.payments_count}</span>
                            </div>
                          )}
                        </div>
                        <Link
                          href={`/pay/${l.id}`}
                          className="group/btn relative px-4 py-2 bg-gradient-to-r from-red-500 to-red-600 rounded-xl text-white font-medium
                                     hover:from-red-600 hover:to-red-700 transform hover:scale-105 transition-all duration-300
                                     shadow-lg hover:shadow-red-500/25 flex items-center gap-2"
                        >
                          <ExternalLink className="w-4 h-4" />
                          Open
                          <div className="absolute inset-0 bg-gradient-to-r from-red-500 to-red-600 rounded-xl blur opacity-50 -z-10 group-hover/btn:opacity-75 transition-opacity"></div>
                        </Link>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {/* Bottom decoration */}
              <div className="absolute bottom-6 left-6 right-6 h-px bg-gradient-to-r from-transparent via-red-500/30 to-transparent"></div>
            </div>
          </div>
        </div>
      </main>

      <style jsx>{`
        .bg-grid-pattern {
          background-image: linear-gradient(
              rgba(239, 68, 68, 0.1) 1px,
              transparent 1px
            ),
            linear-gradient(90deg, rgba(239, 68, 68, 0.1) 1px, transparent 1px);
          background-size: 50px 50px;
        }

        @keyframes float {
          0%,
          100% {
            transform: translateY(0px) rotate(0deg);
          }
          50% {
            transform: translateY(-20px) rotate(5deg);
          }
        }

        @keyframes pulse-slow {
          0%,
          100% {
            opacity: 0.3;
            transform: scale(1);
          }
          50% {
            opacity: 0.6;
            transform: scale(1.1);
          }
        }

        @keyframes bounce-gentle {
          0%,
          100% {
            transform: translateY(0px);
          }
          50% {
            transform: translateY(-10px);
          }
        }

        .animate-pulse-slow {
          animation: pulse-slow 4s ease-in-out infinite;
        }

        .animate-bounce-gentle {
          animation: bounce-gentle 3s ease-in-out infinite;
        }

        .animate-float {
          animation: float 6s ease-in-out infinite;
        }
      `}</style>
    </div>
  );
}
